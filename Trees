Trees

A computational tree is just like a real-world with the one difference being is that it is
visualized upside down, with the root on the top and leaves at the bottom.

Binary Tree

This is one of the most important non-linear data structures.
Types of Binary Trees:

Full - A Binary tree is considered full if every node has 0 or 2 children.
       We can also say a binary tree is full in which all nodes except leaf
       nodes have two children. THEY CANNOT HAVE 1 CHILD.
Complete (aka Binary Heap) - A Binary tree is considered Complete if all the levels are completely filled except
                             possibly the last level and they get filled from left to right.
Perfect - A Binary tree is considered perfect when all the leaves are on the same level and
          all of the nodes that decide to have decendants have 2 children.


Three ways to traverse a (Binary) Tree.
The prefix tells us in what order we visit the node.

In-order Traversal : Order : Left, Node, Right
Pre-order Traversal : Order: Node, Left, Right
Post-order Traversal : Order: Left, Right, Node

These three methods provide different outputs when traversing a Tree.

For example - Full Node

                10
         4            9
      0     5      1      0
                 9   5  7    6

Pre-order Traversal output if printing each node:
10 4 0 5 9 1 9 5 0 7 6
In-order Traversal output if printing each node:
0 4 5 10 9 1 5 9 7 0 6

Side Note: a binary search tree looks like this but the root nodes value on the left will be smaller
and on the right will be bigger. e-g root node = 10, left nodes < 10, right nodes > 10


